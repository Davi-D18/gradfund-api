#!/usr/bin/env python3
"""
Script para testar sistema completo de notifica√ß√µes do chat
"""
import os
import django
import sys
import asyncio

# Configurar Django
sys.path.append('c:/Users/tec_info_noite/Documents/TCC/gradfund-api')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings.development')
django.setup()

from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
from apps.authentication.models import CustomerUser
from apps.chat.models import ChatRoom, Message
from django.contrib.auth.models import User

def test_chat_notifications():
    """Testa sistema completo de notifica√ß√µes"""
    print("üß™ TESTANDO SISTEMA DE NOTIFICA√á√ïES DO CHAT\n")
    
    try:
        # 1. Verificar Redis
        print("1Ô∏è‚É£ Verificando Redis...")
        channel_layer = get_channel_layer()
        if not channel_layer:
            print("‚ùå Redis n√£o configurado")
            return False
        print("‚úÖ Redis configurado")
        
        # 2. Buscar usu√°rios de teste
        print("\n2Ô∏è‚É£ Buscando usu√°rios de teste...")
        users = CustomerUser.objects.all()[:2]
        if len(users) < 2:
            print("‚ùå Precisa de pelo menos 2 usu√°rios CustomerUser")
            return False
        
        user1, user2 = users[0], users[1]
        print(f"‚úÖ Usu√°rio 1: {user1.usuario.username} (CustomerUser ID: {user1.id})")
        print(f"‚úÖ Usu√°rio 2: {user2.usuario.username} (CustomerUser ID: {user2.id})")
        
        # 3. Buscar ou criar sala de chat
        print("\n3Ô∏è‚É£ Verificando sala de chat...")
        chat_room = ChatRoom.objects.first()
        if not chat_room:
            print("‚ùå Nenhuma sala de chat encontrada")
            return False
        
        print(f"‚úÖ Sala encontrada: ID {chat_room.id}")
        
        # 4. Testar notifica√ß√£o para user_1
        print(f"\n4Ô∏è‚É£ Testando notifica√ß√£o para CustomerUser {user1.id}...")
        test_message = {
            'type': 'chat_list_update',
            'room_id': chat_room.id,
            'message': {
                'id': 999,
                'conteudo': 'Mensagem de teste do sistema',
                'enviado_em': '2024-01-01T12:00:00Z',
                'remetente': {
                    'id': user2.id,
                    'username': user2.usuario.username
                }
            }
        }
        
        # Enviar para grupo do usu√°rio
        group_name = f'user_{user1.id}'
        print(f"üì§ Enviando para grupo: {group_name}")
        
        async_to_sync(channel_layer.group_send)(group_name, test_message)
        print("‚úÖ Notifica√ß√£o enviada com sucesso!")
        
        # 5. Testar notifica√ß√£o para user_2
        print(f"\n5Ô∏è‚É£ Testando notifica√ß√£o para CustomerUser {user2.id}...")
        group_name_2 = f'user_{user2.id}'
        print(f"üì§ Enviando para grupo: {group_name_2}")
        
        test_message['remetente']['id'] = user1.id
        test_message['remetente']['username'] = user1.usuario.username
        
        async_to_sync(channel_layer.group_send)(group_name_2, test_message)
        print("‚úÖ Notifica√ß√£o enviada com sucesso!")
        
        print("\nüéâ SISTEMA DE NOTIFICA√á√ïES FUNCIONANDO!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Iniciar servidor Django: python manage.py runserver")
        print("2. Abrir frontend em dois navegadores diferentes")
        print("3. Fazer login com usu√°rios diferentes")
        print("4. Conectar ao WebSocket global em ambos")
        print("5. Enviar mensagem de um usu√°rio")
        print("6. Verificar se o outro recebe notifica√ß√£o")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO no teste: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_chat_notifications()